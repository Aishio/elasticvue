name: Build

on:
  workflow_dispatch:

  push:
    tags:
      - 'v*'

jobs:
  prepare:
    name: Create github release
    runs-on: ubuntu-latest
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
      package_version: ${{ steps.package-version.outputs.current-version }}
    steps:
      - uses: actions/checkout@v3
      - name: Create Github release draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: true
          draft: true
          tag_name: ${{github.ref_name}}
          release_name: ${{github.ref_name}}
      - name: Get current package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.2.3

  build_desktop:
    name: Build desktop app for ${{ matrix.platform }}
    needs: prepare
    outputs:
      linux_binary_url: ${{ steps.linux_upload_binary.outputs.browser_download_url }}
    strategy:
      matrix:
        platform: [ macos-latest, ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: yarn
          node-version: 18

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin

      - name: (linux) install dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 librsvg2-dev patchelf

      - name: install app dependencies
        run: yarn

      - name: build apple-silicon app
        if: matrix.platform == 'macos-latest'
        run: yarn tauri:build --target aarch64-apple-darwin

      - name: (mac arm) upload .dmg
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.release_upload_url }}
          asset_path: src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/elasticvue_${{ needs.prepare.outputs.package_version }}_aarch64.dmg
          asset_name: elasticvue_${{ needs.prepare.outputs.package_version }}_macos_aarch64.dmg
          asset_content_type: application/octet-stream

      - run: yarn tauri:build
      - run: find src-tauri/target/release/bundle

      - name: (linux) upload .deb
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.release_upload_url }}
          asset_path: "src-tauri/target/release/bundle/deb/elasticvue_${{ needs.prepare.outputs.package_version }}_amd64.deb"
          asset_name: "elasticvue_${{ needs.prepare.outputs.package_version }}_linux_amd64.deb"
          asset_content_type: application/octet-stream

      - name: (linux) upload .appimage
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.release_upload_url }}
          asset_path: "src-tauri/target/release/bundle/appimage/elasticvue_${{ needs.prepare.outputs.package_version }}_amd64.AppImage"
          asset_name: "elasticvue_${{ needs.prepare.outputs.package_version }}_linux_amd64.AppImage"
          asset_content_type: application/octet-stream

      - name: (linux) upload binary
        id: linux_upload_binary
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.release_upload_url }}
          asset_path: src-tauri/target/release/elasticvue
          asset_name: elasticvue_${{ needs.prepare.outputs.package_version }}_linux_amd64
          asset_content_type: application/octet-stream

      - name: (mac) upload .dmg
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.release_upload_url }}
          asset_path: src-tauri/target/release/bundle/dmg/elasticvue_${{ needs.prepare.outputs.package_version }}_x64.dmg
          asset_name: elasticvue_${{ needs.prepare.outputs.package_version }}_macos_x64.dmg
          asset_content_type: application/octet-stream

      - name: (windows) upload .msi
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.release_upload_url }}
          asset_path: src-tauri/target/release/bundle/msi/elasticvue_${{ needs.prepare.outputs.package_version }}_x64_en-US.msi
          asset_name: elasticvue_${{ needs.prepare.outputs.package_version }}_windows_x64_en-US.msi
          asset_content_type: application/octet-stream

      - name: (windows) upload .exe
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.release_upload_url }}
          asset_path: src-tauri/target/release/elasticvue.exe
          asset_name: elasticvue_${{ needs.prepare.outputs.package_version }}_windows_x64.exe
          asset_content_type: application/octet-stream

  build_docker:
    name: Build docker images
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Docker hub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          file: docker/Dockerfile_multiarch
          push: true
          tags: cars10/elasticvue-test:latest,cars10/elasticvue-test:${{ needs.prepare.outputs.package_version }}

  publish:
    name: Publish github release
    needs:
      - prepare
      - build_desktop
      - build_docker
    runs-on: ubuntu-latest
    steps:
      - uses: tubone24/update_release@v1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: |
            # Hello  
            ## Test
            ### Test3  
            [link](${{ needs.build_desktop.outputs.linux_binary_url }})
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.prepare.outputs.release_id }}
